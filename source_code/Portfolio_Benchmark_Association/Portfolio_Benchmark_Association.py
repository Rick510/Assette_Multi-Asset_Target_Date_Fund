# -*- coding: utf-8 -*-
"""Portfolio_Benchmark_Association.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LUWAO0dJ_kf-LzB8DLZvG9fN7xN6AVEA
"""

import pandas as pd
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def generate_portfolio_benchmark_association():
    """
    Generate a DataFrame with portfolio-benchmark associations using the provided
    mapping and portfolio data

    Returns:
        DataFrame with generated association data
    """
    logger.info("Generating portfolio-benchmark associations")

    # Product code mapping
    product_mapping = {
        'VTHRX': 'PRD001',
        'VTTSX': 'PRD002',
        'VTWNX': 'PRD003',
        'VTIVX': 'PRD004',
        'VTTHX': 'PRD005',
        'VLXVX': 'PRD006',
        'VFIFX': 'PRD007',
        'VFFVX': 'PRD008',
        'VTINX': 'PRD009',
        'VFORX': 'PRD010',
        'VTTVX': 'PRD011',
        'VSVNX': 'PRD012'
    }

    # Portfolio data from the image
    portfolio_data = [
        {'PORTFOLIOCODE': 'PORT001', 'PRODUCTCODE': 'PRD008'},
        {'PORTFOLIOCODE': 'PORT002', 'PRODUCTCODE': 'PRD012'},
        {'PORTFOLIOCODE': 'PORT003', 'PRODUCTCODE': 'PRD010'},
        {'PORTFOLIOCODE': 'PORT004', 'PRODUCTCODE': 'PRD009'},
        {'PORTFOLIOCODE': 'PORT005', 'PRODUCTCODE': 'PRD003'},
        {'PORTFOLIOCODE': 'PORT006', 'PRODUCTCODE': 'PRD007'},
        {'PORTFOLIOCODE': 'PORT007', 'PRODUCTCODE': 'PRD005'},
        {'PORTFOLIOCODE': 'PORT008', 'PRODUCTCODE': 'PRD005'},
        {'PORTFOLIOCODE': 'PORT009', 'PRODUCTCODE': 'PRD007'},
        {'PORTFOLIOCODE': 'PORT010', 'PRODUCTCODE': 'PRD009'}
    ]

    # Create the portfolio benchmark associations
    data = []

    # For each portfolio, assign both primary and secondary benchmarks
    # All TDFs (the product itself) have stocks and bonds regardless of position on glide path so should have 2 benchmarks for each

    # If thought process incorrect, can just remove the secondary benchmark appended to the data below
    for portfolio in portfolio_data:
        # Add primary benchmark (equity - GSPC)
        data.append({
            "PORTFOLIOCODE": portfolio['PORTFOLIOCODE'],
            "BENCHMARKCODE": "GSPC",
            "RECIPIENTCODE": "NULL",
            "RANK": 1  # Primary benchmark
        })

        # Add secondary benchmark (fixed income - AGG)
        data.append({
            "PORTFOLIOCODE": portfolio['PORTFOLIOCODE'],
            "BENCHMARKCODE": "AGG",
            "RECIPIENTCODE": "NULL",
            "RANK": 2  # Secondary benchmark
        })

    df = pd.DataFrame(data)
    logger.info(f"Generated {len(df)} portfolio-benchmark associations")

    return df

# Main function for executing
def main():
    # Generate portfolio-benchmark association data
    logger.info("Starting portfolio-benchmark association data generation")
    df = generate_portfolio_benchmark_association()

    # Display summary
    logger.info(f"Process complete. Generated {len(df)} records.")

    # Return the DataFrame for display in the console
    return df

if __name__ == "__main__":
    df = main()
    # Display the DataFrame
    try:
        display(df)
    except NameError:
        logger.info("Running in environment without display function. Use print(df) to view the DataFrame if needed.")